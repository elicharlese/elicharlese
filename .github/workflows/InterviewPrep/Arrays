//Problem Statement
//Given an array of integers and a value, determine if there are any two integers in the array whose sum is equal to the given value. Return true if the sum exists and return false if it does not.
//Consider this array and the target sums:
//array {5, 7, 1, 2, 8, 4, 3}
//Target sum 10 7+3=10,2+8=10
//Target sum No 2 values sum upto 19

//Hints
//Use hashing
//Use comparison between elements

//C++
bool find_sum_of_two(vector<int>& A, int val) {
  unordered_set<int> found_values;
  for (int& a : A) {
    if (found_values.find(val - a) != found_values.end()) {
      return true;
    }
    found_values.insert(a);
  }
  return false;
}

int main() {
  vector<int> v = {5, 7, 1, 2, 8, 4, 3};
  vector<int> test = {3, 20, 1, 2, 7};

  for(int i=0; i<test.size(); i++){
    bool output = find_sum_of_two(v, test[i]);
    cout << "find_sum_of_two(v, " << test[i] << ") = " << (output ? "true" : "false") << endl;
  }
  return 0;
}
//Java
class FindSum{
  static boolean findSumOfTwo(int[] A, int val) {
    Set<Integer> foundValues = new HashSet<Integer>();
    for (int a : A) {
      if (foundValues.contains(val - a)) {
        return true;
      }

      foundValues.add(a);
    }
    return false;
  }

  public static void main(String[] args) {
    int[] v = new int[] {5, 7, 1, 2, 8, 4, 3};
    int[] test = new int[] {3, 20, 1, 2, 7};
    
    for(int i = 0; i < test.length; i++){
    boolean output = findSumOfTwo(v, test[i]);
    System.out.println("findSumOfTwo(v, " + test[i] + ") = " + (output ? "true" : "false"));
    }
  }
}
//Python
def find_sum_of_two(A, val):
  found_values = set()
  for a in A:
    if val - a in found_values:
      return True

    found_values.add(a)
    
  return False

v = [5, 7, 1, 2, 8, 4, 3]
test = [3, 20, 1, 2, 7]

for i in range(len(test)):
  output = find_sum_of_two(v, test[i])
  print("find_sum_of_two(v, " + str(test[i]) + ") = " + str(output))
//JavaScript
let findSumOfTwo = function(A, val) {
  let foundValues = new Set();
  for (let a in A) {
    if (foundValues.has(val - A[a])) {
      return true;
    }

    foundValues.add(A[a]);
  }

  return false;
};

let v = [5, 7, 1, 2, 8, 4, 3];
let test = [3, 20, 1, 2, 7];

for (i = 0; i < test.length; i++) {
  let output = findSumOfTwo(v, test[i]);
  console.log("findSumOfTwo(v, " + test[i] + ") = " + output);
}
//Ruby
def find_sum_of_two(arr, val)
  found_values = Set.new
  arr.each do |elt|
    if (found_values.include?(val - elt))
      return true
    end
    found_values.add(elt)
  end
  return false
end

v = [5, 7, 1, 2, 8, 4, 3]
test = [3, 20, 1, 2, 5]
for i in 0 .. test.length-1
  output = find_sum_of_two(v, test[i]) 
  puts "find_sum_of_two(v, " + test[i].to_s + ") = " + output.to_s 
end